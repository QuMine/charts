image:
  registry: docker.io
  repository: qumine/ingress-controller
  tag: v0.8.5
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

qumine:
  debug: false
  port: 25565

  type: "DaemonSet"
  daemonset:
    metricsPort: "8080"
  deployment:
    replicas: 2
    ## Kubernetes svc configutarion
    ##
    service:
      ## Kubernetes svc type
      ##
      type: ClusterIP
      port: 25565
      ## Specify the nodePort value for the LoadBalancer and NodePort service types for the client port
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      # nodePort:
      ## Static clusterIP or None for headless services
      ##
      # clusterIP: ""
      ## External IP list to use with ClusterIP service type
      ##
      externalIPs: []
      ## Use loadBalancerIP to request a specific static IP,
      ## otherwise leave blank
      ##
      # loadBalancerIP:
      ## Address that are allowed when svc is LoadBalancer
      ##
      loadBalancerSourceRanges: []
      ## Address Family to use in the service, can PreferDualStack if you want v4 & v6 support
      ##
      # ipFamilyPolicy: PreferDualStack
      ## Provide any additional annotations which may be required. This can be used to
      ## set the LoadBalancer service type to internal only.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      annotations: {}

      ## Provide any additional labels which may be required. This can be used to
      ## have qumine show up in `kubectl cluster-info`
      ##  kubernetes.io/cluster-service: "true"
      ##  kubernetes.io/name: "qumine"
      labels: {}

## Affinity for pod assignment (this value is evaluated as a template)
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}
## Node labels for pod assignment (this value is evaluated as a template)
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
##
nodeSelector: {}
## Tolerations for pod assignment (this value is evaluated as a template)
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
##
tolerations: []
## Annotations for qumine pods
##
podAnnotations: {}
## Additional labels for the pod(s).
##
podLabels: {}
## Pod priority class name
##
priorityClassName: ""

## ServiceAccount parameters
## https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  create: true
  ## Service Account for pods
  ##
  name:
  ## Annotations for the Service Account
  ##
  annotations: {}

## Kubernetes Security Context
## https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
## Example:
## securityContext:
##  allowPrivilegeEscalation: false
##  readOnlyRootFilesystem: true
##  capabilities:
##    drop: ["ALL"]
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]
podSecurityContext:
  fsGroup: 4242
  runAsUser: 4242
  runAsNonRoot: true

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    cpu: 250m
    memory: 512Mi
  requests:
    memory: 256Mi
    cpu: 125m

## Liveness Probe. The block is directly forwarded into the deployment, so you can use whatever livenessProbe configuration you want.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
livenessProbe:
  httpGet:
    path: /health/live
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 5
  successThreshold: 1
## Readiness Probe. The block is directly forwarded into the deployment, so you can use whatever readinessProbe configuration you want.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
readinessProbe:
  httpGet:
    path: /health/ready
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 5
  successThreshold: 1

## priorityClassName
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
##
# priorityClassName: ""


integrations:
  ## Prometheus Exporter / Metrics
  metrics:
    enabled: false
    ## Metrics exporter pod Annotation and Labels
    ##
    # podAnnotations:
    #   prometheus.io/scrape: "true"
    #   prometheus.io/port: "7979"

    ## Kubernetes svc configutarion
    ##
    service:
      ## Kubernetes svc type
      ##
      type: ClusterIP
      port: 8080
      ## Specify the nodePort value for the LoadBalancer and NodePort service types for the client port
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      # nodePort:
      ## Static clusterIP or None for headless services
      ##
      # clusterIP: ""
      ## External IP list to use with ClusterIP service type
      ##
      externalIPs: []
      ## Use loadBalancerIP to request a specific static IP,
      ## otherwise leave blank
      ##
      # loadBalancerIP:
      ## Address that are allowed when svc is LoadBalancer
      ##
      loadBalancerSourceRanges: []
      ## Provide any additional annotations which may be required. This can be used to
      ## set the LoadBalancer service type to internal only.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      annotations: {}

      ## Provide any additional labels which may be required. This can be used to
      ## have qumine show up in `kubectl cluster-info`
      ##  kubernetes.io/cluster-service: "true"
      ##  kubernetes.io/name: "qumine"
      labels:
        metrics: "true"

    ## Prometheus Operator ServiceMonitor configuration
    ##
    serviceMonitor:
      enabled: false
      ## Namespace in which Prometheus is running
      ##
      # namespace: monitoring

      ## Interval at which metrics should be scraped.
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      # interval: 10s

      ## Timeout after which the scrape is ended
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      # scrapeTimeout: 10s

      ## ServiceMonitor selector labels
      ## ref: https://github.com/bitnami/charts/tree/master/bitnami/prometheus-operator#prometheus-configuration
      ##
      # selector:
      #   prometheus: my-prometheus

  ## GeyserMC
  geysermc:
    enabled: false

    ## GeyserMC image version
    ## ref: https://hub.docker.com/repository/docker/qumine/integrations-bluemap/tags
    ##
    image:
      registry: docker.io
      repository: qumine/integrations-geysermc
      tag: 1188
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: Always
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ##
      # pullSecrets:
      #   - myRegistryKeySecretName

    ## Kubernetes svc configutarion
    ##
    service:
      ## Kubernetes svc type
      ##
      type: ClusterIP
      port: 19132
      ## Specify the nodePort value for the LoadBalancer and NodePort service types for the client port
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      # nodePort:
      ## Static clusterIP or None for headless services
      ##
      # clusterIP: ""
      ## External IP list to use with ClusterIP service type
      ##
      externalIPs: []
      ## Use loadBalancerIP to request a specific static IP,
      ## otherwise leave blank
      ##
      # loadBalancerIP:
      ## Address that are allowed when svc is LoadBalancer
      ##
      loadBalancerSourceRanges: []
      ## Provide any additional annotations which may be required. This can be used to
      ## set the LoadBalancer service type to internal only.
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      annotations: {}

      ## Provide any additional labels which may be required. This can be used to
      ## have qumine show up in `kubectl cluster-info`
      ##  kubernetes.io/cluster-service: "true"
      ##  kubernetes.io/name: "qumine"
      labels:
        geysermc: "true"
